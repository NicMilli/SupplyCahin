{"version":3,"sources":["extension1.png","extension2.png","mylogo.png","getWeb3.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","getWeb3","Promise","resolve","reject","window","addEventListener","a","ethereum","web3","Web3","enable","console","log","provider","providers","HttpProvider","names","prices","amounts","indices","address","inputs","show","App","state","loaded","cost","itemName","quantity","index","uquantity","itemName_ind","uname","ucost","itemNames","costs","quantities","componentDidMount","eth","getAccounts","accounts","net","getId","networkId","ItemManager","Contract","ItemManagerContract","abi","networks","ProductSale","ProductSaleContract","listenToPaymentEvent","setState","getProducts","alert","error","methods","getIndexCount","call","from","result","i","productData","data","handleSubmit","includes","Number","isInteger","createItem","send","events","ProductStep","returnValues","_productIndex","_address","handleUpdate","input","updateQuantity","oldName","updateName","ItemNames","updateCost","handleInputChange","event","target","value","type","checked","name","self","ItemStep","on","evt","_itemSteps","item","this","buyItem","ind","toPay","sendTransaction","to","getProdInd","length","hideUpdates","x","document","getElementById","style","display","newIndices","splice","className","src","mylogo","alt","textDecorationLine","border","backgroundColor","map","onChange","onClick","borderTop","marginLeft","marginRight","id","textcolor","href","extension1","extension2","Component","Boolean","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.24f37383.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/extension1.95b72708.png\";","module.exports = __webpack_public_path__ + \"static/media/extension2.4f31e465.png\";","module.exports = __webpack_public_path__ + \"static/media/mylogo.b8d3a561.png\";","import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Accounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:8545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n","import React, { Component } from \"react\";\r\nimport ItemManagerContract from \"./contracts/ItemManager.json\";\r\nimport ProductSaleContract from \"./contracts/ProductSale.json\";\r\nimport getWeb3 from \"./getWeb3\";\r\n\r\nimport \"./App.css\";\r\nimport extension1 from './extension1.png';\r\nimport extension2 from './extension2.png';\r\nimport mylogo from './mylogo.png';\r\nimport 'bulma/css/bulma.min.css';\r\n\r\n//const productMap = new Map();\r\nconst names = [];\r\nconst prices = [];\r\nconst amounts = [];\r\nconst indices = [];\r\nconst address = [];\r\nconst inputs = [];\r\nconst show = [];\r\n\r\nclass App extends Component {\r\n  state = { loaded: false, cost: 0, itemName: \"Example Item\", \r\n  quantity: 0, index: 0, uquantity: 0, itemName_ind: \"Example Item\", uname: \"New Name\", ucost: 0,\r\n  itemNames: [], costs:[], quantities:[], indices:[], address:[], inputs:[], show:[]};\r\n\r\n  componentDidMount = async () => {\r\n    try {\r\n      // Get network provider and web3 instance.\r\n      this.web3 = await getWeb3();\r\n\r\n      // Use web3 to get the user's accounts.\r\n      this.accounts = await this.web3.eth.getAccounts();\r\n\r\n      // Get the contract instance.\r\n      this.networkId = await this.web3.eth.net.getId();\r\n      \r\n      this.ItemManager = new this.web3.eth.Contract(\r\n        ItemManagerContract.abi,\r\n        ItemManagerContract.networks[this.networkId] && ItemManagerContract.networks[this.networkId].address,\r\n      );\r\n\r\n      this.ProductSale = new this.web3.eth.Contract(\r\n        ProductSaleContract.abi,\r\n        ProductSaleContract.networks[this.networkId] && ProductSaleContract.networks[this.networkId].address,\r\n      );\r\n\r\n      // Set web3, accounts, and contract to the state, and then proceed with an\r\n      // example of interacting with the contract's methods.\r\n      this.listenToPaymentEvent();\r\n      this.setState({ loaded:true }, this.getProducts);\r\n    } catch (error) {\r\n      // Catch any errors for any of the above operations.\r\n      alert(\r\n        `Failed to load web3, accounts, or contract. Check console for details.`,\r\n      );\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  getProducts = async () => {\r\n    let result = await this.ItemManager.methods.getIndexCount().call({ from: this.accounts[0] });\r\n    for (let i=0; i<result; i++) {\r\n       let data =  await this.ItemManager.methods.productData(i).call({ from: this.accounts[0] });\r\n       names[i] = data[0];\r\n       prices[i] = data[1];\r\n       amounts[i] = data[2];\r\n       indices[i] = i;\r\n       address[i] = data[3];\r\n       inputs[i] = 0;\r\n       show[i] = true;\r\n    }\r\n       this.setState({itemNames: names, costs: prices, quantities: amounts, indices: indices, address: address, inputs: inputs, show: show})\r\n  \r\n      //  productMap.set(i, {itemName: data[0], cost: data[1], quantity: data[2]});\r\n      //setValues([...i, {itemName: data[0], cost: data[1], quantity: data[2] }]);\r\n    \r\n  }\r\n\r\n  handleSubmit = async () => {\r\n    const { cost, itemName, quantity, itemNames } = this.state;\r\n    if (itemNames.includes(itemName)) {\r\n      alert(\"This name already exists, please choose a unique name or update the existing product!\")\r\n    }\r\n    else if(!Number.isInteger(Number(cost))){\r\n      alert(\"Prices are in Wei, please only input whole numbers!\")\r\n    }\r\n    else {\r\n    let result = await this.ItemManager.methods.createItem(itemName, cost, quantity).send({ from: this.accounts[0] });\r\n    const index = result.events.ProductStep.returnValues._productIndex;\r\n    names[index] = itemName; prices[index] = cost; amounts[index] = quantity; indices[index] = index; address[index] = result.events.ProductStep.returnValues._address;\r\n    \r\n    this.setState({itemNames: names, costs: prices, quantities: amounts, indices: indices, address:address})\r\n    alert(\"Send \"+cost+\" Wei to \"+result.events.ProductStep.returnValues._address);\r\n    }\r\n  };\r\n\r\n  handleUpdate = async (input) => {\r\n    const {index, indices} = this.state;\r\n\r\n    if (indices.includes(index)){\r\n        if(input==\"qty\"){\r\n        const { index, uquantity } = this.state;\r\n        const update = await this.ItemManager.methods.updateQuantity(uquantity, index).send({ from: this.accounts[0] });\r\n        if(!update){\r\n          alert(\"Update unsuccessful, are you the owner?\")\r\n        }\r\n        else {\r\n        amounts[index] = uquantity;\r\n        this.setState({quantities: amounts})\r\n        alert(\"You updated the available quantity of \"+this.state.itemNames[index]+\" to \"+this.state.quantities[index]);\r\n        }\r\n      }\r\n\r\n      else if(input==\"name\"){\r\n        const { index, uname } = this.state;\r\n        const oldName = this.state.itemNames[index];\r\n        const update = await this.ItemManager.methods.updateName(uname, index).send({ from: this.accounts[0] });\r\n        if(!update){\r\n          alert(\"Update unsuccessful, are you the owner?\")\r\n        }\r\n        else {\r\n        names[index] = uname;\r\n        this.setState({ItemNames: names})\r\n        alert(\"You updated the name of \"+oldName+\" to \"+this.state.itemNames[index]);\r\n        }\r\n      }\r\n\r\n      else {\r\n        const { index, ucost } = this.state;\r\n        if(!Number.isInteger(Number(ucost))){\r\n          alert(\"Prices are in Wei, please only input whole numbers!\");\r\n        }\r\n        else{\r\n        const update = await this.ItemManager.methods.updateCost(ucost, index).send({ from: this.accounts[0] });\r\n        if(!update){\r\n          alert(\"Update unsuccessful, are you the owner?\");\r\n        }\r\n        else{\r\n        prices[index] = ucost;\r\n        this.setState({costs: prices});\r\n        alert(\"You updated the available quantity of \"+this.state.itemNames[index]+\" to \"+this.state.costs[index]);\r\n      }}\r\n      }}\r\n\r\n      else{ alert(\"The index you have chosen does not exist yet!\")}\r\n\r\n}\r\n  \r\n\r\n  handleInputChange = (event) => {\r\n    const target = event.target;\r\n    const value = target.type === 'checkbox' ? target.checked : target.value;\r\n    const name = target.name;\r\n    \r\n    this.setState({\r\n      [name]: value\r\n    });\r\n  }\r\n\r\n  listenToPaymentEvent = () => {\r\n    let self = this;\r\n    this.ItemManager.events.ItemStep().on(\"data\", async function(evt) {\r\n      if(evt.returnValues._itemSteps === 1) {\r\n        let item = await self.ItemManager.methods.productData(evt.returnValues._productIndex).call();\r\n        alert(\"Item \" + item[0] + \" was paid by \" + item[3]+ \" , deliver it now!\");\r\n      };\r\n    });\r\n  }\r\n\r\n  buyItem =async(ind) => {\r\n    const { costs, address, inputs } = this.state;\r\n    console.log(this.state.quantities[ind])\r\n    console.log(inputs[ind])\r\n    if (this.state.quantities[ind] < inputs[ind]) {\r\n      alert(\"Sorry, there is not enough stock to fulfill this order!\");\r\n    }\r\n    else if(!Number.isInteger(Number(inputs[ind]))){\r\n      alert(\"Sorry, quantities have to be whole numbers\");\r\n    }\r\n    else {\r\n    const toPay = costs[ind] * inputs[ind];\r\n    let success = await this.web3.eth.sendTransaction({to: address[ind], from:this.accounts[0], value: Number(toPay)});\r\n    if (!success) {alert(\"Payment unsuccesful\")}\r\n    let data =  await this.ItemManager.methods.productData(ind).call({ from: this.accounts[0] });\r\n    amounts[ind] = data[2];\r\n    this.setState({quantities: amounts});\r\n    }\r\n  }\r\n\r\n  getProdInd = () => {\r\n    const { itemName_ind, itemNames } = this.state;\r\n    if(itemNames.includes(itemName_ind)){\r\n    for (let i=0; i<=itemNames.length; i++){\r\n      if (itemNames[i] == itemName_ind){\r\n        alert(\"The index of \"+itemName_ind+\" is \"+i);\r\n      }\r\n    }\r\n  }\r\n    else {\r\n    alert(\"The item name was not found\")\r\n    }\r\n  }\r\n\r\n  hideUpdates = () => {\r\n    var x = document.getElementById('updates');\r\n    if (x.style.display === 'none') {\r\n        x.style.display = 'block';\r\n    } \r\n    else {\r\n        x.style.display = 'none';\r\n       }\r\n  } \r\n\r\n  render() {\r\n\r\n    const {quantities, indices, show} = this.state;\r\n    const newIndices = indices;\r\n    for(let i = 0; i<indices.length; i++) {\r\n      if (quantities[i] == 0 || !show[i]) {\r\n        newIndices.splice(i,1);\r\n      }\r\n    }\r\n    console.log(newIndices)\r\n    console.log(this.state.indices)\r\n    \r\n    if (!this.state.loaded) {\r\n      return <div className=\"App\">Loading Web3, accounts, and contract...<br></br>\r\n        <h2>In order to buy coins, please install the metamask plugin on chrome or firefox and connect to the Ropsten test network.</h2> <br></br>\r\n        <a href=\"https://metamask.io/download/\">Download Metamask Extension For Your Browser!</a><br></br>\r\n        You may need to show test networks in settings, advanced, show test networks.<br></br><br></br>Find and pin the Metamask extension in your browser<br></br>\r\n        <img src={extension1} alt=\"Instructions\"></img><br></br>then, select the Ropsten test network<br></br>\r\n        <img src={extension2} alt=\"Instructions\"></img><br></br>\r\n        <br></br>You can then select 'buy' and request FREE test Ether from the test faucet.<br></br><br></br>\r\n        <h2>Please refresh the page once connected</h2>\r\n      </div>;\r\n    }\r\n    \r\n    return (\r\n      <div className=\"App\">\r\n        <header className='App-header' ><img className='App-logo' src={mylogo} alt=\"logo\"/></header>\r\n        <h1>Simple Payment/Supply Chain Example!</h1>\r\n        <p>Please let me know if you would like to see any other items listed!<br></br>\r\n        All items are fictional!</p>\r\n        <h1 style={{textDecorationLine:'underline'}}><strong>Products for sale:</strong></h1>\r\n        \r\n        <br></br>\r\n        <div >\r\n        <table className=\"center-table\" style={{border:'solid',}}>\r\n          <thead className=\"has-text-black-bis\" style={{backgroundColor:\"#e6be8a\"}}>\r\n            <tr>\r\n              <th >Product Name:</th>\r\n              <th >Unit Price:</th>\r\n              <th >Quantity Available:</th>\r\n              <th >Buy!</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody className=\"has-text-black-bis\">\r\n              {indices.map((a) => (\r\n                <tr className=\"rows\">\r\n                  <td ><strong>{this.state.itemNames[a]}</strong></td>\r\n                  <td ><strong>{this.state.costs[a]} Wei</strong></td>\r\n                  <td ><strong>{this.state.quantities[a]}</strong></td>\r\n                  <td >\r\n                    Qty: <input type=\"text\" className='table-input' name=\"inputs\" value={this.state.inputs[a]} onChange={this.handleInputChange} />\r\n                    <button type=\"button\" className='buy-btn' onClick={()=>this.buyItem(a)}> Buy!</button>\r\n                  </td>\r\n                </tr>\r\n              ))}\r\n          </tbody>\r\n        </table> \r\n        </div>\r\n        <br></br>\r\n\r\n        <div style={{ borderTop: \"2px solid #0f0f0f \", marginLeft: 100, marginRight: 100 }}></div>\r\n        <button id=\"toggle\" type=\"button\" className= 'updates-btn' onClick={this.hideUpdates}>Show/Hide owner section</button>\r\n        <div id=\"updates\">\r\n\r\n        <h2>Add a new product!</h2>\r\n        Cost: <input type=\"text\" className='input-bx' name=\"cost\" value={this.state.cost} onChange={this.handleInputChange} />\r\n        &nbsp;Product Name: <input type=\"text\" className='input-bx' name=\"itemName\" value={this.state.itemName} onChange={this.handleInputChange} />\r\n        &nbsp;Quantity: <input type=\"text\" className='input-bx' name=\"quantity\" value={this.state.quantity} onChange={this.handleInputChange} />\r\n        &nbsp;<button type=\"button\" className='create-btn' onClick={this.handleSubmit}>Create new Item</button>\r\n        <br></br>\r\n\r\n        <h2>Get an item index!</h2>\r\n        Product name: <input type=\"text\" className='input-bx' name=\"itemName_ind\" value={this.state.itemName_ind} onChange={this.handleInputChange} />\r\n        &nbsp;<button type=\"button\" className='qty-btn' onClick={this.getProdInd}>Get Index</button>\r\n        <br></br>\r\n\r\n        <h2>Update Product Quantity!</h2>\r\n        Product index: <input type=\"text\" className='input-bx' name=\"index\" value={this.state.index} onChange={this.handleInputChange} />\r\n        &nbsp;New Quantity: <input type=\"text\" className='input-bx' name=\"uquantity\" value={this.state.uquantity} onChange={this.handleInputChange} />\r\n        &nbsp;<button type=\"button\" className='qty-btn' onClick={()=>this.handleUpdate('qty')}>Update Quantity</button>\r\n        <br></br>\r\n\r\n        <h2>Update Product Name!</h2>\r\n        Product index: <input type=\"text\" className='input-bx' name=\"index\" value={this.state.index} onChange={this.handleInputChange} />\r\n        &nbsp;New Name: <input type=\"text\" className='input-bx' name=\"uname\" value={this.state.uname} onChange={this.handleInputChange} />\r\n        &nbsp;<button type=\"button\" className='qty-btn' onClick={()=>this.handleUpdate(\"name\")}>Update Name</button>\r\n        <br></br>\r\n\r\n        <h2>Update Product Cost!</h2>\r\n        Product index: <input type=\"text\" className='input-bx' name=\"index\" value={this.state.index} onChange={this.handleInputChange} />\r\n        &nbsp;New Cost: <input type=\"text\" className='input-bx' name=\"ucost\" value={this.state.ucost} onChange={this.handleInputChange} />\r\n        &nbsp;<button type=\"button\" className='qty-btn' onClick={()=>this.handleUpdate(\"cost\")}>Update Cost</button>\r\n        <br></br>\r\n        </div>\r\n\r\n        \r\n\r\n        <footer className='App-footer'>Modified by N.Milligan <br></br>\r\n        For Udemy Ethereum Blockchain Developer Bootcamp with Solidity <br></br>\r\n        <a textcolor='#808000' href=\"https://github.com/NicMilli/SupplyChain\">View the source-code on GitHub!</a></footer>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}