{"version":3,"sources":["extension1.png","extension2.png","mylogo.png","getWeb3.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","getWeb3","Promise","resolve","reject","window","addEventListener","a","ethereum","web3","Web3","enable","console","log","provider","providers","HttpProvider","names","prices","amounts","indices_arr","address_arr","show_arr","App","state","loaded","cost","itemName","quantity","index","uquantity","itemName_ind","uname","ucost","buyIndex","itemNames","costs","quantities","indices","address","input","show","tableIndex","componentDidMount","eth","getAccounts","accounts","net","getId","networkId","ItemManager","Contract","ItemManagerContract","abi","networks","ProductSale","ProductSaleContract","listenToPaymentEvent","setState","getProducts","buildTable","alert","error","methods","getIndexCount","call","from","result","i","productData","data","ind","length","handleSubmit","includes","Number","isInteger","createItem","send","events","ProductStep","returnValues","_productIndex","_address","handleUpdate","updateQuantity","oldName","updateName","ItemNames","updateCost","handleInputChange","event","target","value","type","checked","name","handleDropdownChange","index_i","itemNames_ind","setBuyIndex","handleQtyChange","inputs","self","ItemStep","on","evt","_itemSteps","item","this","buyItem","toPay","sendTransaction","to","getProdInd","toggleVisibility","toggleShow","hideUpdates","x","document","getElementById","style","display","className","src","mylogo","alt","textDecorationLine","border","backgroundColor","map","onChange","onClick","borderTop","marginLeft","marginRight","id","textcolor","href","extension1","extension2","Component","Boolean","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bf309702.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/extension1.95b72708.png\";","module.exports = __webpack_public_path__ + \"static/media/extension2.4f31e465.png\";","module.exports = __webpack_public_path__ + \"static/media/mylogo.b8d3a561.png\";","import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Accounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:8545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n","import React, { Component } from \"react\";\r\nimport ItemManagerContract from \"./contracts/ItemManager.json\";\r\nimport ProductSaleContract from \"./contracts/ProductSale.json\";\r\nimport getWeb3 from \"./getWeb3\";\r\n\r\nimport \"./App.css\";\r\nimport extension1 from './extension1.png';\r\nimport extension2 from './extension2.png';\r\nimport mylogo from './mylogo.png';\r\nimport 'bulma/css/bulma.min.css';\r\n\r\n//const productMap = new Map();\r\nconst names = [];\r\nconst prices = [];\r\nconst amounts = [];\r\nconst indices_arr = [];\r\nconst address_arr = [];\r\nconst inputs_arr = [];\r\nconst show_arr = [];\r\n\r\nclass App extends Component {\r\n  state = { loaded: false, cost: 0, itemName: \"Example Item\", \r\n  quantity: 0, index: 0, uquantity: 0, itemName_ind: \"Example Item\", uname: \"New Name\", ucost: 0, buyIndex: 0.5,\r\n  itemNames: [], costs:[], quantities:[], indices:[], address:[], input:0, show:[], tableIndex: []};\r\n\r\n  componentDidMount = async () => {\r\n    try {\r\n      // Get network provider and web3 instance.\r\n      this.web3 = await getWeb3();\r\n\r\n      // Use web3 to get the user's accounts.\r\n      this.accounts = await this.web3.eth.getAccounts();\r\n\r\n      // Get the contract instance.\r\n      this.networkId = await this.web3.eth.net.getId();\r\n      \r\n      this.ItemManager = new this.web3.eth.Contract(\r\n        ItemManagerContract.abi,\r\n        ItemManagerContract.networks[this.networkId] && ItemManagerContract.networks[this.networkId].address,\r\n      );\r\n\r\n      this.ProductSale = new this.web3.eth.Contract(\r\n        ProductSaleContract.abi,\r\n        ProductSaleContract.networks[this.networkId] && ProductSaleContract.networks[this.networkId].address,\r\n      );\r\n\r\n      // Set web3, accounts, and contract to the state, and then proceed with an\r\n      // example of interacting with the contract's methods.\r\n      this.listenToPaymentEvent();\r\n      this.setState({ loaded:true }, this.getProducts, this.buildTable);\r\n    } catch (error) {\r\n      // Catch any errors for any of the above operations.\r\n      alert(\r\n        `Failed to load web3, accounts, or contract. Check console for details.`,\r\n      );\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  getProducts = async () => {\r\n    let result = await this.ItemManager.methods.getIndexCount().call({ from: this.accounts[0] });\r\n    for (let i=0; i<result; i++) {\r\n       let data =  await this.ItemManager.methods.productData(i).call({ from: this.accounts[0] });\r\n       names[i] = data[0];\r\n       prices[i] = data[1];\r\n       amounts[i] = data[2];\r\n       indices_arr[i] = i;\r\n       address_arr[i] = data[3];\r\n       show_arr[i] = data[4];\r\n    }\r\n       this.setState({itemNames: names, costs: prices, quantities: amounts, indices: indices_arr, address: address_arr, show: show_arr})\r\n  \r\n      //  productMap.set(i, {itemName: data[0], cost: data[1], quantity: data[2]});\r\n      //setValues([...i, {itemName: data[0], cost: data[1], quantity: data[2] }]);\r\n  }\r\n\r\n  buildTable = async() => {\r\n       const {quantities, show} = this.state;\r\n       const ind = [];\r\n       for (let i=0; i<quantities.length; i++) {\r\n         if (quantities[i] !== 0 && show[i] === true) {\r\n           ind[i] = i;\r\n         }\r\n       }\r\n       this.setState({tableIndex: ind})\r\n       console.log(this.state.tableIndex)\r\n  }\r\n\r\n  handleSubmit = async () => {\r\n    const { cost, itemName, quantity, itemNames, show, indices } = this.state;\r\n    if (itemNames.includes(itemName)) {\r\n      alert(\"This name already exists, please choose a unique name or update the existing product!\")\r\n    }\r\n    else if(!Number.isInteger(Number(cost))){\r\n      alert(\"Prices are in Wei, please only input whole numbers!\")\r\n    }\r\n    else {\r\n    let result = await this.ItemManager.methods.createItem(itemName, cost, quantity).send({ from: this.accounts[0] });\r\n    const index = result.events.ProductStep.returnValues._productIndex;\r\n    names[index] = itemName; prices[index] = cost; amounts[index] = quantity; indices[index] = index; address_arr[index] = result.events.ProductStep.returnValues._address;\r\n    show_arr[index] = true;\r\n    this.setState({itemNames: names, costs: prices, quantities: amounts, indices: indices, address: address_arr, show: show})\r\n    alert(\"Send \"+cost+\" Wei to \"+result.events.ProductStep.returnValues._address);\r\n    }\r\n  };\r\n\r\n  handleUpdate = async (input) => {\r\n    const {index, indices} = this.state;\r\n    console.log(indices)\r\n    if (index < indices.length){\r\n        if(input === \"qty\"){\r\n        const { index, uquantity } = this.state;\r\n        const update = await this.ItemManager.methods.updateQuantity(uquantity, index).send({ from: this.accounts[0] });\r\n        if(!update){\r\n          alert(\"Update unsuccessful, are you the owner?\")\r\n        }\r\n        else {\r\n        amounts[index] = uquantity;\r\n        this.setState({quantities: amounts})\r\n        alert(\"You updated the available quantity of \"+this.state.itemNames[index]+\" to \"+this.state.quantities[index]);\r\n        }\r\n      }\r\n\r\n\r\n      else if(input === \"name\"){\r\n        const { index, uname } = this.state;\r\n        const oldName = this.state.itemNames[index];\r\n        const update = await this.ItemManager.methods.updateName(uname, index).send({ from: this.accounts[0] });\r\n        if(!update){\r\n          alert(\"Update unsuccessful, are you the owner?\")\r\n        }\r\n        else {\r\n        names[index] = uname;\r\n        this.setState({ItemNames: names})\r\n        alert(\"You updated the name of \"+oldName+\" to \"+this.state.itemNames[index]);\r\n        }\r\n      }\r\n\r\n      else {\r\n        const { index, ucost } = this.state;\r\n        if(!Number.isInteger(Number(ucost))){\r\n          alert(\"Prices are in Wei, please only input whole numbers!\");\r\n        }\r\n        else{\r\n        const update = await this.ItemManager.methods.updateCost(ucost, index).send({ from: this.accounts[0] });\r\n        if(!update){\r\n          alert(\"Update unsuccessful, are you the owner?\");\r\n        }\r\n        else{\r\n        prices[index] = ucost;\r\n        this.setState({costs: prices});\r\n        alert(\"You updated the available quantity of \"+this.state.itemNames[index]+\" to \"+this.state.costs[index]);\r\n      }}\r\n      }}\r\n\r\n      else{ alert(\"The index you have chosen does not exist yet!\")}\r\n\r\n}\r\n  \r\n\r\n  handleInputChange = (event) => {\r\n    const target = event.target;\r\n    const value = target.type === 'checkbox' ? target.checked : target.value;\r\n    const name = target.name;\r\n    \r\n    this.setState({\r\n      [name]: value\r\n    });\r\n  }\r\n\r\n  // handleTableInput = (ind) => {\r\n  //   const {inputs} = this.state;\r\n\r\n  //   inputs[ind] = \"value from table input\";\r\n  //   this.setState({inputs: inputs}) \r\n  // }\r\n\r\n  handleDropdownChange = (event) => {\r\n    const { itemName_ind, itemNames } = this.state;\r\n    const target = event.target;\r\n    const value = target.type === 'checkbox' ? target.checked : target.value;\r\n    //const name = target.name;\r\n\r\n    if(itemNames.includes(value)){\r\n    for (let i=0; i<itemNames.length; i++){\r\n      if (itemNames[i] === value){\r\n        const index_i = i;\r\n        this.setState({index: index_i});\r\n      }\r\n    }\r\n  }\r\n    else {\r\n    alert(\"The item name was not found\")\r\n    }\r\n    \r\n    this.setState({itemNames_ind: value});\r\n  }\r\n\r\n  setBuyIndex = (event) => {\r\n    const { itemNames } = this.state;\r\n    const target = event.target;\r\n    const value = target.type === 'checkbox' ? target.checked : target.value;\r\n    //const name = target.name;\r\n\r\n    if(itemNames.includes(value)){\r\n    for (let i=0; i<itemNames.length; i++){\r\n      if (itemNames[i] === value){\r\n        const index_i = i;\r\n        this.setState({buyIndex: index_i});\r\n      }\r\n    }\r\n  }\r\n    else {\r\n    alert(\"The item name was not found\")\r\n    }\r\n  }\r\n\r\n  handleQtyChange = (event) => {\r\n    const {inputs} = this.state;\r\n    const target = event.target;\r\n    const value = target.type === 'checkbox' ? target.checked : target.value;\r\n    const name = target.name;\r\n    inputs[name] = value;\r\n    \r\n    this.setState({\r\n      inputs: inputs\r\n    });\r\n  }\r\n\r\n\r\n  listenToPaymentEvent = () => {\r\n    let self = this;\r\n    this.ItemManager.events.ItemStep().on(\"data\", async function(evt) {\r\n      if(evt.returnValues._itemSteps === 1) {\r\n        let item = await self.ItemManager.methods.productData(evt.returnValues._productIndex).call();\r\n        alert(\"Item \" + item[0] + \" was paid by \" + item[3]+ \" , deliver it now!\");\r\n      };\r\n    });\r\n  }\r\n\r\n  buyItem =async() => {\r\n    const { costs, address, inputs, buyIndex } = this.state;\r\n    if (this.state.quantities[buyIndex] < inputs[buyIndex]) {\r\n      alert(\"Sorry, there is not enough stock to fulfill this order!\");\r\n    }\r\n    else if(!Number.isInteger(Number(inputs[buyIndex]))){\r\n      alert(\"Sorry, quantities have to be whole numbers\");\r\n    }\r\n    else {\r\n    const toPay = costs[buyIndex] * inputs[buyIndex];\r\n    let success = await this.web3.eth.sendTransaction({to: address[buyIndex], from:this.accounts[0], value: Number(toPay)});\r\n    if (!success) {alert(\"Payment unsuccesful\")}\r\n    let data =  await this.ItemManager.methods.productData(buyIndex).call({ from: this.accounts[0] });\r\n    amounts[buyIndex] = data[2];\r\n    this.setState({quantities: amounts});\r\n    }\r\n  }\r\n\r\n  getProdInd = () => {\r\n    const { itemName_ind, itemNames } = this.state;\r\n    if(itemNames.includes(itemName_ind)){\r\n    for (let i=0; i<=itemNames.length; i++){\r\n      if (itemNames[i] === itemName_ind){\r\n        alert(\"The index of \"+itemName_ind+\" is \"+i);\r\n      }\r\n    }\r\n  }\r\n    else {\r\n    alert(\"The item name was not found\")\r\n    }\r\n  }\r\n\r\n  toggleVisibility = async() => {\r\n    const {show, index} = this.state;\r\n    let data =  await this.ItemManager.methods.toggleShow(index).send({ from: this.accounts[0] });\r\n     show[index] = data[0];\r\n     this.setState({show: show});\r\n  }\r\n\r\n  hideUpdates = () => {\r\n    var x = document.getElementById('updates');\r\n    if (x.style.display === 'none') {\r\n        x.style.display = 'block';\r\n    } \r\n    else {\r\n        x.style.display = 'none';\r\n       }\r\n  } \r\n\r\n  // filterIndices = () => {\r\n  //   const {indices, quantities} = this.state;\r\n  //   const newIndices = [indices, quantities];\r\n  //   newIndices.filter(function(ind, qty) { \r\n  //     return qty !== 0\r\n  // });\r\n  //   console.log(newIndices)\r\n\r\n  // }\r\n\r\n  render() {\r\n    // const tableIndex = this.filterIndices();\r\n    const {itemNames, tableIndex} = this.state;\r\n\r\n    if (!this.state.loaded) {\r\n      return <div className=\"App\">Loading Web3, accounts, and contract...<br></br>\r\n        <h2>In order to buy coins, please install the metamask plugin on chrome or firefox and connect to the Ropsten test network.</h2> <br></br>\r\n        <a href=\"https://metamask.io/download/\">Download Metamask Extension For Your Browser!</a><br></br>\r\n        You may need to show test networks in settings, advanced, show test networks.<br></br><br></br>Find and pin the Metamask extension in your browser<br></br>\r\n        <img src={extension1} alt=\"Instructions\"></img><br></br>then, select the Ropsten test network<br></br>\r\n        <img src={extension2} alt=\"Instructions\"></img><br></br>\r\n        <br></br>You can then select 'buy' and request FREE test Ether from the test faucet.<br></br><br></br>\r\n        <h2>Please refresh the page once connected</h2>\r\n      </div>;\r\n    }\r\n    \r\n    return (\r\n      <div className=\"App\">\r\n        <header className='App-header' ><img className='App-logo' src={mylogo} alt=\"logo\"/></header>\r\n        <h1>Simple Payment/Supply Chain Example!</h1>\r\n        <p>Please let me know if you would like to see any other items listed!<br></br>\r\n        All items are fictional!</p>\r\n        <h1 style={{textDecorationLine:'underline'}}><strong>Products for sale:</strong></h1>\r\n        \r\n        <br></br>\r\n        <div >\r\n        <table className=\"center-table\" style={{border:'solid',}}>\r\n          <thead className=\"has-text-black-bis\" style={{backgroundColor:\"#e6be8a\"}}>\r\n            <tr>\r\n              <th >Product Name:</th>\r\n              <th >Unit Price:</th>\r\n              <th >Quantity Available:</th>\r\n              <th >Buy!</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody className=\"has-text-black-bis\">\r\n              {tableIndex.map((a) => (\r\n                <tr className=\"rows\">\r\n                  <td ><strong>{this.state.itemNames[a]}</strong></td>\r\n                  <td ><strong>{this.state.costs[a]} Wei</strong></td>\r\n                  <td ><strong>{this.state.quantities[a]}</strong></td>\r\n                  {/* <td >\r\n                    Qty: <input type=\"number\" className='table-input' name=\"inputs\" value={this.state.inputs[a]} onInput={this.setInputs(a)} onChange={this.handleInputChange} />\r\n                    <button type=\"button\" className='buy-btn' onClick={()=>this.buyItem(a)}> Buy!</button>\r\n                  </td> */}\r\n                </tr>\r\n              ))}\r\n          </tbody>\r\n        </table> \r\n        </div>\r\n        <br></br>\r\n\r\n        <h1>Buy an item!</h1>\r\n        Item:<select className='input-bx' onChange={this.setBuyIndex}>\r\n         {itemNames.map(names => {\r\n           return (\r\n             <option value={names}> {names} </option>\r\n           )\r\n         })}\r\n        </select>\r\n        Qty: <input type=\"number\" className='table-input' name=\"inputs\" value={this.state.input} onChange={this.handleInputChange} />\r\n          <button type=\"button\" className='buy-btn' onClick={this.buyItem}> Buy!</button>\r\n\r\n        <div style={{ borderTop: \"2px solid #0f0f0f \", marginLeft: 100, marginRight: 100 }}></div>\r\n        <button id=\"toggle\" type=\"button\" className= 'updates-btn' onClick={this.hideUpdates}>Show/Hide owner section</button>\r\n        <div id=\"updates\">\r\n\r\n        <h1>Add a new product!</h1>\r\n        Cost: <input type=\"number\" className='input-bx' name=\"cost\" value={this.state.cost} onChange={this.handleInputChange} />\r\n        &nbsp;Product Name: <input type=\"text\" className='input-bx' name=\"itemName\" value={this.state.itemName} onChange={this.handleInputChange} />\r\n        &nbsp;Quantity: <input type=\"number\" className='input-bx' name=\"quantity\" value={this.state.quantity} onChange={this.handleInputChange} />\r\n        &nbsp;<button type=\"button\" className='create-btn' onClick={this.handleSubmit}>Create new Item</button>\r\n        <br></br>\r\n\r\n        <h1>Edit Items: Choose product</h1>\r\n        <select className='input-bx' onChange={this.handleDropdownChange}>\r\n         {itemNames.map(names => {\r\n           return (\r\n             <option value={names}> {names} </option>\r\n           )\r\n         })}\r\n        </select>\r\n        {/* Index: <input type=\"number\" className='input-bx' name=\"index\" value={this.state.index} onChange={this.handleEditChange} />\r\n        &nbsp;or Product name: <input type=\"text\" className='input-bx' name=\"itemName_ind\" value={this.state.itemName_ind} onChange={this.handleEditChange} />\r\n        &nbsp;<button type=\"button\" className='qty-btn' onClick={this.getProdInd}>Get Index</button> */}\r\n        <br></br>\r\n\r\n        <h2>Hide an item from the table!</h2>\r\n        Product index: <input type=\"text\" className='input-bx' name=\"index\" value={this.state.index} onChange={this.handleInputChange} />\r\n        &nbsp;<button type=\"button\" className='qty-btn' onClick={this.toggleVisibility}>Hide/show product</button>\r\n        <br></br>\r\n\r\n        <h2>Update Product Quantity!</h2>\r\n        Product index: <input type=\"text\" className='input-bx' name=\"index\" value={this.state.index} onChange={this.handleInputChange} />\r\n        &nbsp;New Quantity: <input type=\"number\" className='input-bx' name=\"uquantity\" value={this.state.uquantity} onChange={this.handleInputChange} />\r\n        &nbsp;<button type=\"button\" className='qty-btn' onClick={()=>this.handleUpdate('qty')}>Update Quantity</button>\r\n        <br></br>\r\n\r\n        <h2>Update Product Name!</h2>\r\n        Product index: <input type=\"text\" className='input-bx' name=\"index\" value={this.state.index} onChange={this.handleInputChange} />\r\n        &nbsp;New Name: <input type=\"text\" className='input-bx' name=\"uname\" value={this.state.uname} onChange={this.handleInputChange} />\r\n        &nbsp;<button type=\"button\" className='qty-btn' onClick={()=>this.handleUpdate(\"name\")}>Update Name</button>\r\n        <br></br>\r\n\r\n        <h2>Update Product Cost!</h2>\r\n        Product index: <input type=\"text\" className='input-bx' name=\"index\" value={this.state.index} onChange={this.handleInputChange} />\r\n        &nbsp;New Cost: <input type=\"text\" className='input-bx' name=\"ucost\" value={this.state.ucost} onChange={this.handleInputChange} />\r\n        &nbsp;<button type=\"button\" className='qty-btn' onClick={()=>this.handleUpdate(\"cost\")}>Update Cost</button>\r\n        <br></br>\r\n        </div>\r\n\r\n        \r\n\r\n        <footer className='App-footer'>Modified by N.Milligan <br></br>\r\n        For Udemy Ethereum Blockchain Developer Bootcamp with Solidity <br></br>\r\n        <a textcolor='#808000' href=\"https://github.com/NicMilli/SupplyChain\">View the source-code on GitHub!</a></footer>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n//variables across reloads (show/hide) && inputs for table","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}