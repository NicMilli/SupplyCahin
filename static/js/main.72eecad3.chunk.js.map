{"version":3,"sources":["extension1.png","extension2.png","mylogo.png","getWeb3.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","getWeb3","Promise","resolve","reject","window","addEventListener","a","ethereum","web3","Web3","enable","console","log","provider","providers","HttpProvider","names","prices","amounts","indices","address","App","state","loaded","cost","itemName","quantity","index","uquantity","bquantity","itemNames","costs","quantities","componentDidMount","eth","getAccounts","accounts","net","getId","networkId","ItemManager","Contract","ItemManagerContract","abi","networks","ProductSale","ProductSaleContract","listenToPaymentEvent","setState","getProducts","alert","error","methods","getIndexCount","call","from","result","i","productData","data","handleSubmit","createItem","send","events","ProductStep","returnValues","_productIndex","_address","handleUpdate","updateQuantity","handleInputChange","event","target","value","type","checked","name","self","ItemStep","on","evt","_itemStep","items","_itemIndex","item","_identifier","_buyerAddress","this","buyItem","ind","sendTransaction","to","hideUpdates","x","document","getElementById","style","display","className","src","mylogo","alt","map","b","key","c","d","onClick","borderTop","marginLeft","marginRight","id","onChange","href","extension1","extension2","Component","Boolean","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.72eecad3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/extension1.95b72708.png\";","module.exports = __webpack_public_path__ + \"static/media/extension2.4f31e465.png\";","module.exports = __webpack_public_path__ + \"static/media/mylogo.b8d3a561.png\";","import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Accounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:8545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n","import React, { Component } from \"react\";\r\nimport ItemManagerContract from \"./contracts/ItemManager.json\";\r\nimport ProductSaleContract from \"./contracts/ProductSale.json\";\r\nimport getWeb3 from \"./getWeb3\";\r\n\r\nimport \"./App.css\";\r\nimport extension1 from './extension1.png';\r\nimport extension2 from './extension2.png';\r\nimport mylogo from './mylogo.png';\r\nimport 'bulma/css/bulma.min.css';\r\n\r\n//const productMap = new Map();\r\nconst names = [];\r\nconst prices = [];\r\nconst amounts = [];\r\nconst indices = [];\r\nconst address = [];\r\n\r\nclass App extends Component {\r\n  state = { loaded: false, cost: 0, itemName: \"exampleItem1\", \r\n  quantity: 0, index: 0, uquantity: 0, bquantity: 0,\r\n  itemNames: [], costs:[], quantities:[], indices:[], address:[]};\r\n\r\n  componentDidMount = async () => {\r\n    try {\r\n      // Get network provider and web3 instance.\r\n      this.web3 = await getWeb3();\r\n\r\n      // Use web3 to get the user's accounts.\r\n      this.accounts = await this.web3.eth.getAccounts();\r\n\r\n      // Get the contract instance.\r\n      this.networkId = await this.web3.eth.net.getId();\r\n      \r\n      this.ItemManager = new this.web3.eth.Contract(\r\n        ItemManagerContract.abi,\r\n        ItemManagerContract.networks[this.networkId] && ItemManagerContract.networks[this.networkId].address,\r\n      );\r\n\r\n      this.ProductSale = new this.web3.eth.Contract(\r\n        ProductSaleContract.abi,\r\n        ProductSaleContract.networks[this.networkId] && ProductSaleContract.networks[this.networkId].address,\r\n      );\r\n\r\n      // Set web3, accounts, and contract to the state, and then proceed with an\r\n      // example of interacting with the contract's methods.\r\n      this.listenToPaymentEvent();\r\n      this.setState({ loaded:true }, this.getProducts);\r\n    } catch (error) {\r\n      // Catch any errors for any of the above operations.\r\n      alert(\r\n        `Failed to load web3, accounts, or contract. Check console for details.`,\r\n      );\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  getProducts = async () => {\r\n    let result = await this.ItemManager.methods.getIndexCount().call({ from: this.accounts[0] });\r\n    for (let i=0; i<result; i++) {\r\n       let data =  await this.ItemManager.methods.productData(i).call({ from: this.accounts[0] });\r\n       names[i] = data[0];\r\n       prices[i] = data[1];\r\n       amounts[i] = data[2];\r\n       indices[i] = i;\r\n       address[i] = data[3];\r\n    }\r\n       this.setState({itemNames: names, costs: prices, quantities: amounts, indices: indices, address: address})\r\n  \r\n      //  productMap.set(i, {itemName: data[0], cost: data[1], quantity: data[2]});\r\n      //setValues([...i, {itemName: data[0], cost: data[1], quantity: data[2] }]);\r\n    \r\n  }\r\n\r\n  handleSubmit = async () => {\r\n    const { cost, itemName, quantity } = this.state;\r\n\r\n    let result = await this.ItemManager.methods.createItem(itemName, cost, quantity).send({ from: this.accounts[0] });\r\n    const index = result.events.ProductStep.returnValues._productIndex;\r\n    names[index] = itemName; prices[index] = cost; amounts[index] = quantity; indices[index] = index; address[index] = result.events.ProductStep.returnValues._address;\r\n    \r\n    // productMap.set(index, {itemName: itemName, cost: cost, quantity: quantity});\r\n    this.setState({itemNames: names, costs: prices, quantities: amounts, indices: indices, address:address})\r\n    \r\n    alert(\"Send \"+cost+\" Wei to \"+result.events.ProductStep.returnValues._address);\r\n  };\r\n\r\n  handleUpdate = async () => {\r\n    const { index, uquantity } = this.state;\r\n\r\n    const update = await this.ItemManager.methods.updateQuantity(uquantity, index).send({ from: this.accounts[0] });\r\n    if(!update){\r\n      alert(\"Update unsuccessful, are you the owner?\")\r\n    }\r\n    amounts[index] = uquantity;\r\n    this.setState({quantities: amounts})\r\n    console.log(this.state.quantities)\r\n    alert(\"You updated the available quantity of \"+this.state.itemNames[index]+\" to \"+uquantity);\r\n  }\r\n\r\n  handleInputChange = (event) => {\r\n    const target = event.target;\r\n    const value = target.type === 'checkbox' ? target.checked : target.value;\r\n    const name = target.name;\r\n\r\n    this.setState({\r\n      [name]: value\r\n    });\r\n  }\r\n\r\n  listenToPaymentEvent = () => {\r\n    let self = this;\r\n    this.ItemManager.events.ItemStep().on(\"data\", async function(evt) {\r\n      if(evt.returnValues._itemStep === 0) {\r\n        let item = await self.ItemManager.methods.items(evt.returnValues._itemIndex).call();\r\n        alert(\"Item \" + item._identifier + \" was paid by \" + item._buyerAddress+ \" , deliver it now!\");\r\n      };\r\n    });\r\n  }\r\n\r\n  buyItem =async(ind) => {\r\n    const { costs, address } = this.state;\r\n    //await this.ItemManager.methods.triggerPayment(ind, 1, this.accounts[0]).send({ from: this.accounts[0] });\r\n    await this.web3.eth.sendTransaction({to: address[ind], from:this.accounts[0], value: costs[ind]});\r\n    let data =  await this.ItemManager.methods.productData(ind).call({ from: this.accounts[0] });\r\n    amounts[ind] = data[2];\r\n    this.setState({quantities: amounts});\r\n    //await this.ItemManager.methods.triggerPayment(0,1,this.accounts[0]).send({ from: this.accounts[0] });\r\n  }\r\n\r\n  hideUpdates = () => {\r\n    var x = document.getElementById('updates');\r\n    if (x.style.display === 'none') {\r\n        x.style.display = 'block';\r\n    } \r\n    else {\r\n        x.style.display = 'none';\r\n       }\r\n  }\r\n\r\n  //  printValues = () => {\r\n  //   for(let [key, value] of productMap){\r\n  //     console.log(value.itemName +':'+ value.cost +':'+ value.quantity)\r\n  //     return(\r\n  //       <div>{value.itemName} {value.cost} {value.quantity}</div>\r\n  //       )\r\n  //   }\r\n  //  }\r\n\r\n//   printValues = async() => {\r\n//     await this.getValues;\r\n//   productMap.forEach((value, key) => {\r\n//     data.push(\r\n//       <tr>\r\n//          <td>{key}</td>\r\n//         <td>{value.itemName}</td>\r\n//         <td>{value.cost}</td>\r\n//       </tr>\r\n//     );\r\n//   });\r\n//   console.log(data)\r\n// }\r\n\r\n  \r\n  render() {\r\n    \r\n    if (!this.state.loaded) {\r\n      return <div className=\"App\">Loading Web3, accounts, and contract...<br></br>\r\n        <h2>In order to buy coins, please install the metamask plugin on chrome or firefox and connect to the Ropsten test network.</h2> <br></br>\r\n        <a href=\"https://metamask.io/download/\">Download Metamask Extension For Your Browser!</a><br></br>\r\n        You may need to show test networks in settings, advanced, show test networks.<br></br><br></br>Find and pin the Metamask extension in your browser<br></br>\r\n        <img src={extension1} alt=\"Instructions\"></img><br></br>then, select the Ropsten test network<br></br>\r\n        <img src={extension2} alt=\"Instructions\"></img><br></br>\r\n        <br></br>You can then select 'buy' and request FREE test Ether from the test faucet.<br></br><br></br>\r\n        <h2>Please refresh the page once connected</h2>\r\n      </div>;\r\n    }\r\n    \r\n    return (\r\n      <div className=\"App\">\r\n        <header className='App-header' ><img className='App-logo' src={mylogo} alt=\"logo\"/></header>\r\n        <h1>Simply Payment/Supply Chain Example!</h1>\r\n        <h2>Products for sale:</h2>\r\n\r\n        {/*\r\n        I have tried storing an object in the state which has names, cost, qty. \r\n        This worked well but I was unable to access it in here. Storing each in a different array\r\n        in state I am able to render them in a vertical list format and even got each\r\n        one in a different columns. Sadly these columns were not the same width as the headings and \r\n        I put <td> around <tr> which produced a lot of errors.\r\n        I want each array to take a column in a table with all columns side by side, width matching that of the heading.\r\n        I have solved this somewhat using bulma css but still get an error:\r\n        Warning: Each child in a list should have a unique \"key\" prop.\r\n*/}\r\n<div className=\"columns is-mobile\">\r\n  <div className=\"column\">\r\n<table>\r\n<thead className=\"is-gapless has-background-info has-text-black-bis \">\r\n        <tr>\r\n            <th >Product Name:</th>\r\n        </tr>\r\n</thead>\r\n<tbody>\r\n{this.state.itemNames.map((a) => (\r\n      <tr>\r\n        <td>{a}</td>\r\n      </tr>\r\n))}\r\n</tbody>\r\n</table> \r\n</div>\r\n<div className=\"column\">\r\n<table>\r\n<thead className=\"is-gapless bd-notification has-background-info has-text-black-bis\">\r\n        <tr>\r\n            <th >Unit Price:</th>\r\n        </tr>\r\n        </thead>\r\n<tbody>\r\n\r\n{this.state.costs.map((b, key) => (\r\n      <tr>\r\n        <td>{b}</td>\r\n      </tr>\r\n))}\r\n</tbody>\r\n</table> \r\n</div>\r\n<div className=\"column\">\r\n<table>\r\n<thead className=\"is-gapless bd-notification has-background-info has-text-black-bis\">\r\n        <tr>\r\n            <th >Quantity Available:</th>\r\n        </tr>\r\n</thead>\r\n<tbody>\r\n{this.state.quantities.map((c, key) => (\r\n      <tr>\r\n        <td>{c}</td>\r\n      </tr>\r\n))}\r\n</tbody>\r\n</table> \r\n</div>\r\n\r\n<div className=\"column\">\r\n<table>\r\n<thead className=\"is-gapless bd-notification has-background-success has-text-black-bis\">\r\n        <tr>\r\n            <th >Buy!</th>\r\n        </tr>\r\n</thead>\r\n<tbody>\r\n{this.state.indices.map((d, key) => (\r\n      <tr>\r\n        <td>\r\n          <button type=\"button\" className='create-btn' onClick={()=>this.buyItem(d)}>Buy!</button>\r\n        </td>\r\n      </tr>\r\n))}\r\n</tbody>\r\n</table> \r\n</div>\r\n\r\n</div>\r\n \r\n\r\n        <div style={{ borderTop: \"2px solid #0f0f0f \", marginLeft: 500, marginRight: 500 }}></div>\r\n        <button id=\"toggle\" type=\"button\" className= 'updates-btn' onClick={this.hideUpdates}>Show/Hide owner section</button>\r\n        <div id=\"updates\">\r\n\r\n        <h2>Add a new product</h2>\r\n        Cost: <input type=\"text\" className='input-bx' name=\"cost\" value={this.state.cost} onChange={this.handleInputChange} />\r\n        Product Name: <input type=\"text\" className='input-bx' name=\"itemName\" value={this.state.itemName} onChange={this.handleInputChange} />\r\n        Quantity: <input type=\"text\" className='input-bx' name=\"quantity\" value={this.state.quantity} onChange={this.handleInputChange} />\r\n        <button type=\"button\" className='create-btn' onClick={this.handleSubmit}>Create new Item</button>\r\n        <br></br>\r\n\r\n        <h2>Update Product Quantity</h2>\r\n        Product index: <input type=\"text\" className='input-bx' name=\"index\" value={this.state.index} onChange={this.handleInputChange} />\r\n        New Quantity: <input type=\"text\" className='input-bx' name=\"uquantity\" value={this.state.uquantity} onChange={this.handleInputChange} />\r\n        <button type=\"button\" className='qty-btn' onClick={this.handleUpdate}>Update Quantity</button>\r\n        </div>\r\n\r\n        <footer className='App-footer'>Modified by N.Milligan <br></br>\r\n        For Udemy Ethereum Blockchain Developer Bootcamp with Solidity</footer>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}